Only in malloc-implicit-lab/: complete.c
diff -r malloc-implicit-lab/mdriver.c malloclab-implicit/mdriver.c
933c933
< 	    printf("%2d%10s%5.0f%%%8.0f%10.6f%8.0f\n", 
---
> 	    printf("%2d%10s%5.0f%%%8.0f%10.6f%6.0f\n", 
945c945
< 	    printf("%2d%10s%6s%8s%10s%8s\n", 
---
> 	    printf("%2d%10s%6s%8s%10s%6s\n", 
957c957
< 	printf("%12s%5.0f%%%8.0f%10.6f%8.0f\n", 
---
> 	printf("%12s%5.0f%%%8.0f%10.6f%6.0f\n", 
965c965
< 	printf("%12s%6s%8s%10s%8s\n", 
---
> 	printf("%12s%6s%8s%10s%6s\n", 
diff -r malloc-implicit-lab/mm-naive.c malloclab-implicit/mm-naive.c
97,110d96
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
diff -r malloc-implicit-lab/mm.c malloclab-implicit/mm.c
1,10c1,2
< /* 
<  * mm.c -  Simple allocator based on implicit free lists, 
<  *                  first fit placement, and boundary tag coalescing. 
<  *
<  * Each block has header of the form:
<  * 
<  *      31                     3  2  1  0 
<  *      -----------------------------------
<  *     | s  s  s  s  ... s  s  s  0  0  a/f
<  *      ----------------------------------- 
---
> /*
>  * mm-naive.c - The fastest, least memory-efficient malloc package.
12,21c4,7
<  * where s are the meaningful size bits and a/f is set 
<  * iff the block is allocated. The list has the following form:
<  *
<  * heap                             heap
<  * start                            end  
<  *  ---------------------------------
<  * |  pad   | zero or more usr blks |
<  *  ---------------------------------
<  *          |                       |
<  *          |                       |
---
>  * In this naive approach, a block is allocated by simply incrementing
>  * the brk pointer.  A block is pure payload. There are no headers or
>  * footers.  Blocks are never coalesced or reused. Realloc is
>  * implemented directly using mm_malloc and mm_free.
22a9,10
>  * NOTE TO STUDENTS: Replace this header comment with your own header
>  * comment that gives a high level description of your solution.
24a13,14
> #include <stdlib.h>
> #include <assert.h>
27c17
< #include <stdlib.h>
---
> #include <stdint.h>
28a19
> 
32c23,26
< /* Team structure */
---
> /*********************************************************
>  * NOTE TO STUDENTS: Before you do anything else, please
>  * provide your team information in the following struct.
>  ********************************************************/
34,37c28,38
<     "implicit first fit", 
<     "Dave OHallaron", "droh",
<     "", ""
< }; 
---
>     /* Team name */
>     "xxx",
>     /* First member's full name */
>     "xxx",
>     /* First member's email address */
>     "xxx@xxx",
>     /* Second member's full name (leave blank if none) */
>     "",
>     /* Second member's email address (leave blank if none) */
>     ""
> };
40c41
<     size_t header;
---
>     uint32_t header;
44,76c45,46
< /* $begin mallocmacros */
< /* Basic constants and macros */
< #define WSIZE       4       /* word size (bytes) */  
< #define DSIZE       8       /* doubleword size (bytes) */
< #define OVERHEAD    8       /* overhead of header and footer (bytes) */
< 
< /* Pack a size and allocated bit into a word */
< #define PACK(size, alloc)  ((size) | (alloc))
< 
< /* Read and write a word at address p */
< #define GET(p)       (*(size_t *)(p))
< #define PUT(p, val)  (*(size_t *)(p) = (val))  
< 
< /* Read the size and allocated fields from address p */
< #define GET_SIZE(p)  (GET(p) & ~0x7)
< #define GET_ALLOC(p) (GET(p) & 0x1)
< 
< /* Given block ptr bp, compute address of its header and footer */
< #define HDRP(p)  (block_t *) ((unsigned char *) p - offsetof(block_t, payload))
< 
< /* Given block ptr bp, compute address of next and previous blocks */
< #define NEXT_BLKP(block)  (block_t *) ((unsigned char *) block+ GET_SIZE(block))
< /* $end mallocmacros */
< 
< /* Global variables */
< static block_t *heap_start; 
< static block_t *heap_end; 
< 
< /* function prototypes for internal helper routines */
< static block_t *extend_heap(size_t words);
< static void place(block_t *bp, size_t asize);
< static block_t *find_fit(size_t asize);
< static void coalesce(block_t *bp);
---
> #define WSIZE       4 /* word size (bytes) */
> #define DSIZE       8 /* doubleword size (bytes) */
78,91c48,68
< /* 
<  * mm_init - Initialize the memory manager 
<  */
< int mm_init(void) 
< {
<     /* create the initial empty heap */
<     char *bp = (char *) heap_start;
<     if ((bp = mem_sbrk(WSIZE)) == NULL)
< 	return -1;
<     PUT(bp, 0);                        /* alignment padding */
<     bp += WSIZE;
<     heap_start = (block_t *) bp;
<     heap_end = heap_start;
<     return 0;
---
> /* Write a word at address p */
> #define PUTWD(p, val)   (*(size_t *)(p) = (val))    
> 
> #define GET_HEADER(p) ((block_t *) ((unsigned char *) p - offsetof(block_t, payload)))
> 
> #define GET_ALLOC(block) (block->header & 0x1)
> #define GET_SIZE(block) (block->header & ~0x7)
> 
> #define FIND_NEXT(block) (block_t *) (((unsigned char *) block) + GET_SIZE(block))
> 
> block_t *heap_start;
> block_t *heap_end;
> 
> static void *coalescing(block_t *block) {
>     /*
>         TODO 
>         get the next block and check whether the next block is empty
>         if it is, coalesce block with next block
> 
>         finally, return the pointer of block
>     */
94,100c71,75
< /* 
<  * mm_malloc - Allocate a block with at least size bytes of payload 
<  */
< void *mm_malloc(size_t size) 
< {
<     size_t asize;      /* adjusted block size */
<     block_t *bp;      
---
> static void *extend_heap(uint32_t words) {
>     /*
>         TODO
>         if the number of word is odd, you should increase the 
>         number of word by one for 8-byte alignment.
102,110c77,78
<     /* Adjust block size to include overhead and alignment reqs. */
<     if (size <= DSIZE)
<         asize = DSIZE + OVERHEAD;
<     else
<         asize = DSIZE + ((size + 7) / OVERHEAD) * OVERHEAD;
<     
<     /* TODO: Search the free list for a fit */
<     /* TODO: No fit found. Get more memory and place the block */
< } 
---
>         use mem_sbrk() to increase the memory 
>         by the size of n words (i.e., words * 4)
112,117c80,82
< /* 
<  * mm_free - Free a block 
<  */
< void mm_free(void *bp)
< {
<     /* TODO */
---
>         change heap_end, block size, and coalesce if needed 
>         
>     */
120,123c85
< /*
<  * mm_realloc - naive implementation of mm_realloc
<  */
< void *mm_realloc(void *ptr, size_t size)
---
> static block_t *find_fit(uint32_t asize)
125,126c87,90
<     void *newp;
<     size_t copySize;
---
>     /*  TODO
>         traversing the free list and return the block 
>         if the block is not allocated and 
>         the size of block is larger of equal than asize
128,137c92,95
<     if ((newp = mm_malloc(size)) == NULL) {
< 	printf("ERROR: mm_malloc failed in mm_realloc\n");
< 	exit(1);
<     }
<     copySize = GET_SIZE(HDRP(ptr));
<     if (size < copySize)
<       copySize = size;
<     memcpy(newp, ptr, copySize);
<     mm_free(ptr);
<     return newp;
---
>         if not found, return NULL
>     */
> 
>     return NULL; // No fit found
140c98,104
< /* The remaining routines are internal helper routines */
---
> static void split_block(block_t *block, uint32_t asize){
>     /*
>         TODO
>         set size of block as asize and set alloc bit as 1
>         then, decrease the next block size and set alloc bit as 0
>     */
> }
143c107
<  * extend_heap - Extend heap with free block and return its block pointer
---
>  * mm_init - initialize the malloc package.
145c109
< static block_t *extend_heap(size_t words) 
---
> int mm_init(void)
147,150c111,122
<     block_t *bp;
<     size_t size;
< 	
<     /* TODO: Allocate an even number of words to maintain alignment */
---
>     // You do not need to change mm_init, but you change if you want.
>     
>     /* create the initial empty heap */
>     char *bp;
>     if ((bp = mem_sbrk(WSIZE)) == NULL)
>         return -1;
> 
>     PUTWD(bp, 0); /* alignment padding */ 
>     bp += WSIZE; 
>     heap_start = (block_t *) bp;
>     heap_end = heap_start;
>     return 0;
154,155c126,127
<  * place - Place block of asize bytes at start of free block bp 
<  *         and split if remainder would be at least minimum block size (16 bytes)
---
>  * mm_malloc - Allocate a block by incrementing the brk pointer.
>  *     Always allocate a block whose size is a multiple of the alignment.
157c129
< static void place(block_t *bp, size_t asize)
---
> void *mm_malloc(size_t size)
159c131,133
<     /* TODO */
---
>     /*
>         TODO
>     */
162,163c136,137
< /* 
<  * find_fit - Find a fit for a block with asize bytes 
---
> /*
>  * mm_free - Free block and coalescing.
165c139
< static block_t *find_fit(size_t asize)
---
> void mm_free(void *ptr)
167c141,147
<     /* TODO: first fit search */
---
>     block_t *block = GET_HEADER(ptr);
> 
>     /*
>         TODO
>         set alloc bit in header as 0
>         and coalescing the block
>      */
171c151
<  * coalesce 
---
>  * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
173c153
< static void coalesce(block_t *bp) 
---
> void *mm_realloc(void *ptr, size_t size)
175c155,168
<     /* TODO */
---
>     void *oldptr = ptr;
>     void *newptr;
>     size_t copySize;
>     
>     newptr = mm_malloc(size);
>     if (newptr == NULL)
>       return NULL;
> 
>     copySize = GET_SIZE(GET_HEADER(ptr));
>     if (size < copySize)
>       copySize = size;
>     memcpy(newptr, oldptr, copySize);
>     mm_free(oldptr);
>     return newptr;
